/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthSignupRouteImport } from './routes/_auth/signup'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AuthForgotPasswordRouteImport } from './routes/_auth/forgot-password'
import { Route as AuthenticatedNotesIndexRouteImport } from './routes/_authenticated/notes/index'
import { Route as AuthenticatedNotesIdRouteImport } from './routes/_authenticated/notes/$id'
import { Route as AuthenticatedNotesNewIndexRouteImport } from './routes/_authenticated/notes/new/index'

const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const AuthForgotPasswordRoute = AuthForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRoute,
} as any)
const AuthenticatedNotesIndexRoute = AuthenticatedNotesIndexRouteImport.update({
  id: '/notes/',
  path: '/notes/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedNotesIdRoute = AuthenticatedNotesIdRouteImport.update({
  id: '/notes/$id',
  path: '/notes/$id',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedNotesNewIndexRoute =
  AuthenticatedNotesNewIndexRouteImport.update({
    id: '/notes/new/',
    path: '/notes/new/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/profile': typeof ProfileRoute
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/notes/$id': typeof AuthenticatedNotesIdRoute
  '/notes': typeof AuthenticatedNotesIndexRoute
  '/notes/new': typeof AuthenticatedNotesNewIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/profile': typeof ProfileRoute
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/notes/$id': typeof AuthenticatedNotesIdRoute
  '/notes': typeof AuthenticatedNotesIndexRoute
  '/notes/new': typeof AuthenticatedNotesNewIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/profile': typeof ProfileRoute
  '/_auth/forgot-password': typeof AuthForgotPasswordRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/signup': typeof AuthSignupRoute
  '/_authenticated/notes/$id': typeof AuthenticatedNotesIdRoute
  '/_authenticated/notes/': typeof AuthenticatedNotesIndexRoute
  '/_authenticated/notes/new/': typeof AuthenticatedNotesNewIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/profile'
    | '/forgot-password'
    | '/login'
    | '/signup'
    | '/notes/$id'
    | '/notes'
    | '/notes/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/profile'
    | '/forgot-password'
    | '/login'
    | '/signup'
    | '/notes/$id'
    | '/notes'
    | '/notes/new'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_authenticated'
    | '/profile'
    | '/_auth/forgot-password'
    | '/_auth/login'
    | '/_auth/signup'
    | '/_authenticated/notes/$id'
    | '/_authenticated/notes/'
    | '/_authenticated/notes/new/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  ProfileRoute: typeof ProfileRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/forgot-password': {
      id: '/_auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_authenticated/notes/': {
      id: '/_authenticated/notes/'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof AuthenticatedNotesIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/notes/$id': {
      id: '/_authenticated/notes/$id'
      path: '/notes/$id'
      fullPath: '/notes/$id'
      preLoaderRoute: typeof AuthenticatedNotesIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/notes/new/': {
      id: '/_authenticated/notes/new/'
      path: '/notes/new'
      fullPath: '/notes/new'
      preLoaderRoute: typeof AuthenticatedNotesNewIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedNotesIdRoute: typeof AuthenticatedNotesIdRoute
  AuthenticatedNotesIndexRoute: typeof AuthenticatedNotesIndexRoute
  AuthenticatedNotesNewIndexRoute: typeof AuthenticatedNotesNewIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedNotesIdRoute: AuthenticatedNotesIdRoute,
  AuthenticatedNotesIndexRoute: AuthenticatedNotesIndexRoute,
  AuthenticatedNotesNewIndexRoute: AuthenticatedNotesNewIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  ProfileRoute: ProfileRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
